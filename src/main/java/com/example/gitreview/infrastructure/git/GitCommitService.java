package com.example.gitreview.infrastructure.git;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Git提交相关服务
 */
@Service
public class GitCommitService {

    private static final Logger logger = LoggerFactory.getLogger(GitCommitService.class);

    // 准入ID的正则模式，支持多种格式
    private static final Pattern[] GATE_ID_PATTERNS = {
        Pattern.compile("准入[ID|id|Id][:：]\\s*([A-Za-z0-9-_]+)"),
        Pattern.compile("gate[_-]?id[:：]\\s*([A-Za-z0-9-_]+)", Pattern.CASE_INSENSITIVE),
        Pattern.compile("\\[([A-Za-z0-9-_]+)\\]"),  // [GATE-123]
        Pattern.compile("#([A-Za-z0-9-_]+)")  // #GATE-123
    };

    /**
     * 从Git仓库的最近提交中提取准入ID
     */
    public String extractGateIdFromHistory(File repoDir) {
        try (Git git = Git.open(repoDir)) {
            Repository repository = git.getRepository();
            ObjectId head = repository.resolve("HEAD");

            if (head == null) {
                logger.warn("No HEAD found in repository: {}", repoDir);
                return null;
            }

            try (RevWalk revWalk = new RevWalk(repository)) {
                RevCommit commit = revWalk.parseCommit(head);

                // 检查最近5个提交
                int maxCommits = 5;
                int count = 0;

                while (commit != null && count < maxCommits) {
                    String commitMessage = commit.getFullMessage();
                    logger.debug("Checking commit: {} - {}", commit.getName(), commitMessage);

                    String gateId = extractGateIdFromMessage(commitMessage);
                    if (gateId != null) {
                        logger.info("Found gate ID: {} in commit: {}", gateId, commit.getName());
                        return gateId;
                    }

                    // 移动到下一个提交
                    RevCommit[] parents = commit.getParents();
                    if (parents.length > 0) {
                        commit = revWalk.parseCommit(parents[0]);
                    } else {
                        break;
                    }
                    count++;
                }
            }

            logger.warn("No gate ID found in recent commits");
            return null;

        } catch (Exception e) {
            logger.error("Failed to extract gate ID from git history: {}", repoDir, e);
            return null;
        }
    }

    /**
     * 从提交信息中提取准入ID
     */
    private String extractGateIdFromMessage(String message) {
        if (message == null || message.trim().isEmpty()) {
            return null;
        }

        for (Pattern pattern : GATE_ID_PATTERNS) {
            Matcher matcher = pattern.matcher(message);
            if (matcher.find()) {
                String gateId = matcher.group(1);
                if (gateId != null && !gateId.trim().isEmpty()) {
                    return gateId.trim();
                }
            }
        }

        return null;
    }

    /**
     * 构建包含准入ID的提交信息
     */
    public String buildCommitMessage(String className, String gateId) {
        StringBuilder message = new StringBuilder();
        message.append("test: add unit tests for ").append(className).append("\n\n");

        if (gateId != null && !gateId.trim().isEmpty()) {
            message.append("准入ID: ").append(gateId).append("\n");
        }

        message.append("- Generated by Claude AI\n");
        message.append("- Auto-generated unit tests\n");
        message.append("- All tests passed");

        return message.toString();
    }
}
